1. Explain the difference between @api_view and APIView in Django REST Framework.

@api_view: It's a decorator used for function-based views (FBVs). It allows you to define specific HTTP methods (GET, POST, etc.) and their corresponding logic for that view.

APIView: It's a class-based view (CBV) that gives more flexibility by letting you define methods like get(), post(), and others. It's better for handling complex logic or when you want to reuse code.

2. What is the purpose of serializers in Django REST Framework?

Serializers in DRF convert data between complex data types (like Django models) and native Python data types (like JSON). They also handle validating incoming data and ensuring the data meets the correct format

3. How do you implement authentication and permissions in Django REST Framework?

Authentication: This is done by verifying the identity of a user. In DRF, you can use methods like JWT authentication or session-based authentication. For JWT, you can use (SimpleJWT) to issue and verify tokens.

Permissions: Permissions are used to control access to views. For example, the [IsAuthenticated] permission ensures that only authenticated users can access a view. You can also create custom permissions based on your needs.

4. Explain how pagination works in DRF.
Pagination in DRF is used to limit the number of results returned in a single API response, improving performance

5. How would you optimize a Django queryset for performance?

Use ( select_related)  for ForeignKey relationships to fetch related objects in a single query.

Use (prefetch_related) for ManyToMany relationships to avoid separate queries for each related object.

6. What is the difference between select_related and prefetch_related?
select_related: It performs a SQL join and fetches related objects in a single query. This is used for ForeignKey and OneToOne relationships.

prefetch_related: It performs a separate query for each relationship and "joins" them in Python. This is used for ManyToMany relationships or reverse relationships.

7. How would you prevent N+1 query problems?

The N+1 query problem occurs when you query an object and then make additional queries to fetch related objects one by one. To prevent this, you can use 

select_related (for ForeignKey and OneToOne relationships) or prefetch_related (for ManyToMany relationships) to fetch related data in fewer queries.

8. What are some common HTTP methods used in REST APIs and their typical use cases?

GET: Retrieve data from the server (e.g., get a list of products).

POST: Send data to the server to create a new resource (e.g., create a new product).

PUT/PATCH: Update an existing resource (e.g., update product details).

DELETE: Remove a resource (e.g., delete a product).

